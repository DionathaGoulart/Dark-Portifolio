name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # ================================
  # JOB DE TESTES
  # ================================
  test:
    name: 🧪 Testes e Qualidade
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout do código
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 🔧 Instalar dependências
        run: npm ci

      - name: 🔍 Verificação de tipos TypeScript
        run: npx tsc --noEmit

      - name: 🧹 Executar linting
        run: npm run lint

      - name: 🏗️ Build do projeto
        run: npm run build

      - name: 🔒 Auditoria de segurança
        run: npm audit --audit-level moderate

  # ================================
  # JOB DE LIGHTHOUSE
  # ================================
  lighthouse:
    name: 📊 Lighthouse CI
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: test

    steps:
      - name: 📥 Checkout do código
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 🔧 Instalar dependências
        run: npm ci

      - name: 🏗️ Build do projeto
        run: npm run build

      - name: 📊 Executar Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouserc.json'
          uploadArtifacts: false
          temporaryPublicStorage: true

  # ================================
  # JOB DE DEPLOY PREVIEW
  # ================================
  deploy-preview:
    name: 🚀 Deploy Preview
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/develop')
    needs: test

    steps:
      - name: 📥 Checkout do código
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 🔧 Instalar dependências
        run: npm ci

      - name: 🏗️ Build do projeto
        run: npm run build

      - name: 🚀 Deploy Preview (Vercel)
        # TODO: Configurar deploy no Vercel
        # Exemplo de configuração:
        # uses: amondnet/vercel-action@v25
        # with:
        #   vercel-token: ${{ secrets.VERCEL_TOKEN }}
        #   vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        #   vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        #   working-directory: ./
        #   scope: ${{ secrets.VERCEL_ORG_ID }}
        run: echo "🚀 Deploy Preview configurado para Vercel"

  # ================================
  # JOB DE DEPLOY PRODUCTION
  # ================================
  deploy-production:
    name: 🌟 Deploy Production
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: test

    steps:
      - name: 📥 Checkout do código
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 🔧 Instalar dependências
        run: npm ci

      - name: 🏗️ Build do projeto
        run: npm run build

      - name: 🌟 Deploy Production (Vercel)
        # TODO: Configurar deploy no Vercel
        # Exemplo de configuração:
        # uses: amondnet/vercel-action@v25
        # with:
        #   vercel-token: ${{ secrets.VERCEL_TOKEN }}
        #   vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        #   vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        #   working-directory: ./
        #   scope: ${{ secrets.VERCEL_ORG_ID }}
        #   vercel-args: '--prod'
        run: echo "🌟 Deploy Production configurado para Vercel"
